from collections import defaultdict
from typing import Optional

from sqlalchemy.future import select
from sqlalchemy.exc import IntegrityError, OperationalError
# from database.db import Statistic
from database.db import logger, Purchase, ShopItem
from database.db import session_maker, User,Statistic

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
update_counter = defaultdict(int)
update_counter2 = defaultdict(int)
# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
shop_items_data = [
    {
        'name': '–¢—ã –∫–ª–æ—É–Ω',
        'description': 'ü§°',
        'price': 100,
        'item_type': '–≠–º–æ–¥–∑–∏'
    },
    {
        'name': '–¢–∏–ø–æ –∑–≤–µ–∑–¥–∞',
        'description': 'ü§©',
        'price': 100,
        'item_type': '–≠–º–æ–¥–∑–∏'
    },
    {
        'name': '–ü—Ä–∞–∑–¥–Ω–∏–∫',
        'description': 'ü•≥',
        'price': 100,
        'item_type': '–≠–º–æ–¥–∑–∏'
    },
    {
        'name': '–ù–µ–ø–æ–Ω',
        'description': 'ü•∏',
        'price': 100,
        'item_type': '–≠–º–æ–¥–∑–∏'
    },
    {
        'name': '–†–æ—Ç',
        'description': 'ü§ê',
        'price': 100,
        'item_type': '–≠–º–æ–¥–∑–∏'
    }
]




async def get_user_name(user_id: int) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    async with session_maker() as session:
        try:
            result = await session.execute(select(User).filter(User.user_id == user_id))
            user = result.scalars().first()
            if user:
                return user.username  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —É –º–æ–¥–µ–ª–∏ User –µ—Å—Ç—å –ø–æ–ª–µ username
            else:
                return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        except Exception as e:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫, –Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}"


async def get_user_rating(user_id: int) -> Optional[int]:
    """–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    async with session_maker() as session:
        result = await session.execute(select(User.rating).where(User.user_id == user_id))
        return result.scalar()


async def update_user_attributes(user_id: int,user_result:str, isprivate: bool,israng: bool) -> str:
    """–û–±–Ω–æ–≤–∏—Ç—å –∞—Ç—Ä–∏–±—É—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º —É—Å–ª–æ–≤–∏—è–º."""
    async with session_maker() as session:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            result = await session.execute(select(User).filter(User.user_id == user_id))
            user = result.scalars().first()

            if user:
                if update_counter[user_id] <1:

                    if not isprivate:
                        if not israng:
                        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                            update_counter[user_id] += 1
                            if '–ü–æ–±–µ–¥–∞' in user_result:
                                user.wins += 1
                            elif '–ü–æ—Ä–∞–∂–µ–Ω–∏–µ' in user_result:
                                user.losses += 1
                            elif user_result == '–ù–∏—á—å—è!':
                                user.draws += 1
                            user.total_games+=1
                            await update_user_stats(user_id, user.wins, user.losses, user.draws)
                            update_counter[user_id]+=1
                # –û–±–Ω–æ–≤–ª—è–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è updates
                        else:
                            update_counter[user_id] += 1
                            if '–ü–æ–±–µ–¥–∞' in user_result:
                                user.wins += 1
                                user.rating +=1
                            elif '–ü–æ—Ä–∞–∂–µ–Ω–∏–µ' in user_result:
                                user.losses += 1
                                user.rating -= 1
                                if user.rating < 0:
                                    user.rating = 0
                            elif user_result == '–ù–∏—á—å—è!':
                                user.draws += 1
                            user.total_games += 1
                            await update_user_stats(user_id, user.wins, user.losses, user.draws)
                            update_counter[user_id] += 1

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                await session.commit()
                return '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞'
            else:
                return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        except Exception as e:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫, –Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}"
# –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è win_percentage –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–∫–∞
async def update_user_stats(user_id, wins, losses, draws):
    try:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        if wins < 0 or losses < 0 or draws < 0:
            raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥, –ø–æ—Ä–∞–∂–µ–Ω–∏–π –∏ –Ω–∏—á—å–∏—Ö –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º.")

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        async with session_maker() as session:
            # stats = await session.get(Statistic, user_id)
            user = await session.get(User, user_id)
            if user:
                user.wins = wins
                user.losses = losses
                user.draws = draws
                user.total_games = wins + losses + draws
                user.win_percentage = (wins / user.total_games * 100) if user.total_games > 0 else 0

                await session.commit()
                await session.refresh(user)
            else:
                raise ValueError("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
async def add_diamonds_to_user(user_id: int, count : int) -> None:
    try:
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        async with session_maker() as session:
            user = await session.get(User, user_id)
            if user:
                user.diamonds+=int(count)

                await session.commit()
                await session.refresh(user)
            else:
                raise ValueError("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except(IntegrityError, OperationalError) as e :
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
async def insert_shop_items(items_data):
    async with session_maker() as session:
        try:
            for item_data in items_data:
                new_item = ShopItem(
                    name=item_data['name'],
                    description=item_data['description'],
                    price=item_data['price'],
                    item_type=item_data['item_type']
                )
                session.add(new_item)
            await session.commit()
        except Exception as e:
            await session.rollback()
            raise e
# –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è win_percentage –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–∫–∞
# async def update_user_st(user_id, wins, losses, draws):
#     try:
#
#         # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#         async with session_maker() as session:
#             stats = await session.get(Statistic, user_id)
#             if stats:
#                 stats.white_wins = wins
#                 stats.white_losses = losses
#                 stats.white_draws = draws
#                 stats.total_games = wins + losses + draws
#                 stats.win_percentage_white = (wins / stats.total_games * 100) if stats.total_games > 0 else 0
#
#                 await session.commit()
#                 await session.refresh(stats)
#             else:
#                 raise ValueError("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
#     except Exception as e:
#         logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
# async def update_user_statistic(user_id: int,user_result:str) -> str:
#     """–û–±–Ω–æ–≤–∏—Ç—å –∞—Ç—Ä–∏–±—É—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º —É—Å–ª–æ–≤–∏—è–º."""
#     async with session_maker() as session:
#         try:
#             # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
#             result = await session.execute(select(Statistic).filter(Statistic.user_id == user_id))
#             user = result.scalars().first()
#
#             if user:
#                 if update_counter2[user_id] <1:
#                     # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#                         update_counter2[user_id] += 1
#                         if '–ü–æ–±–µ–¥–∞' in user_result:
#                             user.white_wins += 1
#                         elif '–ü–æ—Ä–∞–∂–µ–Ω–∏–µ' in user_result:
#                             user.white_losses += 1
#                         elif user_result == '–ù–∏—á—å—è!':
#                             user.white_draws += 1
#                         user.total_games+=1
#                         await update_user_st(user_id, user.white_wins, user.white_losses, user.white_draws)
#                         update_counter[user_id]+=1
#             # –û–±–Ω–æ–≤–ª—è–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è updates
#
#                     # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
#                         await session.commit()
#                 return '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞'
#             else:
#                 return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
#         except Exception as e:
#             # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫, –Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
#             return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}"

async def get_item_id(user_id: int) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    async with session_maker() as session:
        try:
            result = await session.execute(select(User).filter(User.user_id == user_id))
            user = result.scalars().first()
            result2 = await session.execute(
                select(Purchase).filter(
                    Purchase.user_id == user.user_id,
                    Purchase.item_id == user.item_id  # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ item_id
                )
            )

            user2 = result2.scalars().first()
            if user:
                return user2.description  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —É –º–æ–¥–µ–ª–∏ User –µ—Å—Ç—å –ø–æ–ª–µ username
            else:
                return ""
        except Exception as e:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫, –Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}"


# –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è win_percentage –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–∫–∞
async def update_user_name(user_id: int,username:str):
    try:

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        async with session_maker() as session:

            user = await session.get(User, user_id)
            if user:
                user.username = username
                await session.commit()
                await session.refresh(user)
            else:
                raise ValueError("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")