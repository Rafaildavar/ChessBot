from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage
from sqlalchemy.future import select
from db import session_maker, User, Feedback, ClanMember, Clan, ShopItem
import asyncio
from aiogram import F
from datetime import datetime, timedelta
from sqlalchemy import and_
from sqlalchemy import delete
from dotenv import load_dotenv
import os


from board import Figure, FigureType
from game import Game

load_dotenv()
# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM (–º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π)
class ProfileState(StatesGroup):
    waiting_for_username = State()
    waiting_for_telegram_name = State()
TOKEN = os.getenv('token')

bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)



# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–æ—Å–∫–∏ –∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ñ–∏–≥—É—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_board_states = {}
games = []  # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–∞—Ö
async def get_game(callback, game_id: int) -> Game | None:
    print(games)
    game = next(filter(lambda g: g.id == game_id, games), None)
    if game is None:
        await callback.answer('–ò–≥—Ä–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
        return
    return game
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"
@dp.callback_query(F.data == 'profile')
async def profile(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    async with session_maker() as session:  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é
        try:
            # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ SQLAlchemy –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            result = await session.execute(select(User).filter(User.user_id == user_id))
            user = result.scalars().first()  # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

            if user:
                await callback_query.message.answer(
                    f"–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n"
                    f"–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.username}\n"
                    f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥: {user.wins}\n"
                    f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä–∞–∂–µ–Ω–∏–π: {user.losses}\n"
                    f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—ã—Ö –ø–∞—Ä—Ç–∏–π: {user.total_games}\n"
                    f"–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –ø–æ–±–µ–¥: {user.win_percentage}%\n"
                    f"–ë–∞–ª–∞–Ω—Å: {user.diamonds} üíé\n"
                )
            else:
                # –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ—Ç, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –µ–≥–æ —Å–æ–∑–¥–∞—Ç—å
                await callback_query.message.answer(
                    "–ü–æ—Ö–æ–∂–µ, —É –≤–∞—Å –µ—â–µ –Ω–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è. –î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –µ–≥–æ!\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à username:"
                )
                await state.set_state(ProfileState.waiting_for_username)
        except Exception as e:
            await callback_query.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ username
@dp.message(ProfileState.waiting_for_username)
async def process_username(message: types.Message, state: FSMContext):
    await state.update_data(username=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à username –≤ Telegram:")
    await state.set_state(ProfileState.waiting_for_telegram_name)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ telegram –∏–º–µ–Ω–∏
@dp.message(ProfileState.waiting_for_telegram_name)
async def process_telegram_name(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    username = user_data.get("username")
    telegram_name = message.text
    user_id = message.from_user.id

    async with session_maker() as session:
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            user = User(user_id=user_id, username=username, telegram_name=telegram_name)
            session.add(user)
            await session.commit()

            await message.answer(
                f"–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω!\n"
                f"–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {username}\n"
            )
        except Exception as e:
            await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

    await state.clear()

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command('start'))
async def start_command(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π —Å—ã–≥—Ä–∞–µ–º –≤ —à–∞—Ö–º–∞—Ç—ã?")
    start_button = InlineKeyboardButton(text="–ù–∞—á–∞—Ç—å –∏–≥—Ä—É", callback_data="start_game")
    rank_button = InlineKeyboardButton(text="üéñ–†–µ–π—Ç–∏–Ω–≥–æ–≤–∞—è –∏–≥—Ä–∞", callback_data="rank_game")
    public_button = InlineKeyboardButton(text="–¢–æ–≤–∞—Ä–∏—â–µ—Å–∫–∞—è –∏–≥—Ä–∞", callback_data="public_game")
    practice_button = InlineKeyboardButton(text="ü§ñ–ò–≥—Ä–∞ —Å –±–æ—Ç–æ–º", callback_data="practice_game")
    profile_button = InlineKeyboardButton(text="–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile")
    clan_button = InlineKeyboardButton(text="–ö–ª–∞–Ω—ã", callback_data="clan")
    FriendGame_button = InlineKeyboardButton(text="–ò–≥—Ä–∞ —Å –¥—Ä—É–≥–æ–º", callback_data="friendGame")
    setting_button = InlineKeyboardButton(text="üõ†–ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="setting")
    top100_button = InlineKeyboardButton(text="üèÜ–¢–æ–ø 100 –∏–≥—Ä–æ–∫–æ–≤", callback_data="top100")
    shop_button = InlineKeyboardButton(text="üí∞–ú–∞–≥–∞–∑–∏–Ω", callback_data="shop")
    myBalance_button = InlineKeyboardButton(text="üíé–ú–æ–π –±–∞–ª–∞–Ω—Å", callback_data="myBalance")
    feadback_button = InlineKeyboardButton(text="üí¨–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data="feedback")

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [start_button],
        [profile_button],
        [clan_button, FriendGame_button],
        [public_button, rank_button],
        [shop_button, myBalance_button],
        [practice_button],
        [feadback_button, setting_button],
        [top100_button]
    ])

    await message.answer("–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è "–¢–æ–ø 100 –∏–≥—Ä–æ–∫–æ–≤"
@dp.callback_query(F.data == 'top100')
async def handle_top100(callback_query: types.CallbackQuery):
    try:
        async with session_maker() as session:
            result = await session.execute(select(User).order_by(User.win_percentage.desc()).limit(100))
            top_users = result.scalars().all()

            if top_users:
                response = "üèÜ –¢–æ–ø 100 –∏–≥—Ä–æ–∫–æ–≤ –ø–æ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—é –ø–æ–±–µ–¥:\n"
                for i, user in enumerate(top_users, start=1):
                    response += f"{i}. {user.username} - {user.win_percentage}% –ø–æ–±–µ–¥\n"
            else:
                response = "–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¢–æ–ø 100."

        await callback_query.message.answer(response)
    except Exception as e:
        await callback_query.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¢–æ–ø 100: {str(e)}")

# –ö–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
class FeedbackState(StatesGroup):
    waiting_for_feedback = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–∑—ã–≤–∞

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è "–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤"
@dp.callback_query(F.data == 'feedback')
async def handle_feedback(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π –æ—Ç–∑—ã–≤:")
    await state.set_state(FeedbackState.waiting_for_feedback)

@dp.message(FeedbackState.waiting_for_feedback)
async def save_feedback(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    feedback_text = message.text

    async with session_maker() as session:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–≤–ª—è–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∑—ã–≤ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
            last_24_hours = datetime.utcnow() - timedelta(days=1)
            result = await session.execute(
                select(Feedback).filter(
                    and_(
                        Feedback.user_id == user_id,
                        Feedback.created_at >= last_24_hours
                    )
                )
            )
            last_feedback = result.scalars().first()

            if last_feedback:
                # –ï—Å–ª–∏ –æ—Ç–∑—ã–≤ –Ω–∞–π–¥–µ–Ω, –∏–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await message.answer("–í—ã —É–∂–µ –æ—Å—Ç–∞–≤–ª—è–ª–∏ –æ—Ç–∑—ã–≤ —Å–µ–≥–æ–¥–Ω—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç –æ—Ç–∑—ã–≤–∞
                feedback = Feedback(user_id=user_id, feedback=feedback_text)

                # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–∑—ã–≤ –≤ —Å–µ—Å—Å–∏—é
                session.add(feedback)
                await session.commit()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ

                await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!")
        except Exception as e:
            await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞: {str(e)}")
        finally:
            await state.clear()  # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∏–ª–∏ —É—Å–ø–µ—à–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞ –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ú–∞–≥–∞–∑–∏–Ω"
@dp.callback_query(F.data == 'shop')
async def handle_shop(callback_query: types.CallbackQuery):
    try:
        async with session_maker() as session:
            # –ó–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤
            result = await session.execute(select(ShopItem))
            items = result.scalars().all()  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã

            if items:
                # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä—ã –µ—Å—Ç—å, —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
                response = "üõçÔ∏è –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤:\n"

                # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
                keyboard = InlineKeyboardMarkup(inline_keyboard=[], row_width=1)

                for item in items:
                    response += f"üõí {item.name}\n–û–ø–∏—Å–∞–Ω–∏–µ: {item.description}\n–¶–µ–Ω–∞: {item.price} üíé\n\n"

                    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Ç–æ–≤–∞—Ä–∞
                    buy_button = InlineKeyboardButton(
                        text=f"–ö—É–ø–∏—Ç—å {item.name}",
                        callback_data=f"buy_{item.item_id}"
                    )

                    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                    keyboard.inline_keyboard.append([buy_button])

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
                await callback_query.message.answer(response, reply_markup=keyboard)
            else:
                # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ—Ç, —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º
                response = "–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø—É—Å—Ç."
                await callback_query.message.answer(response)

    except Exception as e:
        await callback_query.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤: {str(e)}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ö—É–ø–∏—Ç—å"
@dp.callback_query(F.data.startswith('buy_'))
async def handle_buy(callback_query: types.CallbackQuery):
    try:
        item_id = int(callback_query.data.split('_')[1])  # –ü–æ–ª—É—á–∞–µ–º ID —Ç–æ–≤–∞—Ä–∞
        user_id = callback_query.from_user.id  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        async with session_maker() as session:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
            item = await session.get(ShopItem, item_id)
            user = await session.get(User, user_id)

            if not item:
                await callback_query.message.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return

            if not user:
                await callback_query.message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ
            if user.diamonds < item.price:
                await callback_query.message.answer(f"–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ üíé –¥–ª—è –ø–æ–∫—É–ø–∫–∏ {item.name}.")
                return

            # –ï—Å–ª–∏ —Å—Ä–µ–¥—Å—Ç–≤ —Ö–≤–∞—Ç–∞–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
            user.diamonds -= item.price
            await session.commit()

            # –õ–æ–≥–∏–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
            # –ù–∞–ø—Ä–∏–º–µ—Ä, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ —Ç–∞–±–ª–∏—Ü—É –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–∫—É–ø–∫–µ
            await callback_query.message.answer(f"–í—ã –∫—É–ø–∏–ª–∏ {item.name} –∑–∞ {item.price} üíé!")

            # –í–æ–∑–º–æ–∂–Ω–æ, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –ø–æ–∫—É–ø–∫–µ
            # await bot.send_message(admin_id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username} –∫—É–ø–∏–ª {item.name} –∑–∞ {item.price} üíé")

    except Exception as e:
        await callback_query.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–∫—É–ø–∫–∏: {str(e)}")


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —à–∞—Ö–º–∞—Ç–Ω–æ–π –¥–æ—Å–∫–∏ –∫–∞–∫ inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def generate_chessboard_inline_keyboard(board):
    inline_keyboard = []
    for rank in range(8):
        row_buttons = []
        for file in range(8):
            piece = board[rank][file]
            callback_data = f"piece_{rank}_{file}" if piece != " " else f"move_{rank}_{file}"
            row_buttons.append(InlineKeyboardButton(text=piece, callback_data=callback_data))
        inline_keyboard.append(row_buttons)
    return InlineKeyboardMarkup(inline_keyboard=inline_keyboard)

@dp.callback_query(F.data == 'start_game')
async def profile(callback_query: types.CallbackQuery):
    game = Game(0, 0)
    games.append(game)
    print(game.id)
    await bot.send_message(callback_query.message.chat.id, '–ê–ê–ê', reply_markup=game.board.get_board(0))
    #await bot.send_message(callback_query.message.chat.id, '–ê–ê–ê', reply_markup=game.board.get_board(1))


@dp.callback_query()
async def profile(callback_query: types.CallbackQuery):
    print(callback_query.data)
    game_id = int(callback_query.data.split(':')[0])
    cell_id = callback_query.data.split(':')[1]

    game = await get_game(callback_query, game_id)
    if game is None:
        return

    if cell_id in ('rook', 'bishop', 'queen', 'knight'):
        await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)
        await callback_query.answer(cell_id)

        mes = int(callback_query.data.split(':')[2])
        fig = callback_query.data.split(':')[3]

        game.board.get_cell(fig).figure.type = FigureType._member_map_[cell_id]
        game.turn = (game.turn + 1) % 2

        await bot.edit_message_text(text='–ê–ê–ê', message_id=mes, reply_markup=game.board.get_board(0), chat_id=callback_query.message.chat.id)

        return

    mess = game.click(cell_id)
    if mess is not None:
        if mess == '–ü—Ä–µ–≤—Ä–∞—â–µ–Ω–∏–µ':
            c = game.turn
            await bot.send_message(chat_id=callback_query.message.chat.id, text='–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–≥—É—Ä—É:',reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text=Figure(FigureType.rook, c).get_pic(), callback_data=f'{game_id}:rook:{callback_query.message.message_id}:{cell_id}'), InlineKeyboardButton(text=Figure(FigureType.bishop, c).get_pic(), callback_data=f'{game_id}:bishop:{callback_query.message.message_id}:{cell_id}'), InlineKeyboardButton(text=Figure(FigureType.queen, c).get_pic(), callback_data=f'{game_id}:queen:{callback_query.message.message_id}:{cell_id}'), InlineKeyboardButton(text=Figure(FigureType.knight, c).get_pic(), callback_data=f'{game_id}:knight:{callback_query.message.message_id}:{cell_id}')]]))
        else:
            await callback_query.answer(text=mess)
    try:
        await bot.edit_message_text(text='–ê–ê–ê', message_id=callback_query.message.message_id, reply_markup=game.board.get_board(0), chat_id=callback_query.message.chat.id)
    except Exception:
        print('–æ–π')
        await callback_query.answer()
# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω')
    await dp.start_polling(bot)

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        print("–ë–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")

