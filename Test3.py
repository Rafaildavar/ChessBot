import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram import F
from aiogram.fsm.storage.memory import MemoryStorage

TOKEN = 'token'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω
bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–æ—Å–∫–∏ –∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ñ–∏–≥—É—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_board_states = {}

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command('start'))
async def start_command(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π —Å—ã–≥—Ä–∞–µ–º –≤ —à–∞—Ö–º–∞—Ç—ã?")
    start_button = InlineKeyboardButton(text="–ù–∞—á–∞—Ç—å –∏–≥—Ä—É", callback_data="start_game")
    rank_button = InlineKeyboardButton(text="üéñ–†–µ–π—Ç–∏–Ω–≥–æ–≤–∞—è –∏–≥—Ä–∞", callback_data="rank_game")
    public_button = InlineKeyboardButton(text="–¢–æ–≤–∞—Ä–∏—â–µ—Å–∫–∞—è –∏–≥—Ä–∞", callback_data="public_game")
    practice_button = InlineKeyboardButton(text="ü§ñ–ò–≥—Ä–∞ —Å –±–æ—Ç–æ–º", callback_data="practice_game")
    profile_button = InlineKeyboardButton(text="–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile")
    clan_button = InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–ª–∞–Ω", callback_data="clan")
    FriendGame_button = InlineKeyboardButton(text="–ò–≥—Ä–∞ —Å –¥—Ä—É–≥–æ–º", callback_data="friendGame")
    setting_button = InlineKeyboardButton(text="üõ†–ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="setting")
    top100_button = InlineKeyboardButton(text="üèÜ–¢–æ–ø 100 –∏–≥—Ä–æ–∫–æ–≤", callback_data="top100")
    shop_button = InlineKeyboardButton(text="üí∞–ú–∞–≥–∞–∑–∏–Ω", callback_data="shop")
    myBalance_button = InlineKeyboardButton(text="üíé–ú–æ–π –±–∞–ª–∞–Ω—Å", callback_data="myBalance")
    feadback_button = InlineKeyboardButton(text="üí¨–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data="feadback")

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [start_button],
        [profile_button],
        [clan_button, FriendGame_button],
        [public_button, rank_button],
        [shop_button, myBalance_button],
        [practice_button],
        [feadback_button, setting_button],
        [top100_button]
    ])

    await message.answer("–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:", reply_markup=keyboard)

@dp.callback_query(F.data == 'profile')
async def profile(callback_query: types.CallbackQuery):
    await callback_query.answer("–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è "–ù–∞—á–∞—Ç—å –∏–≥—Ä—É"
@dp.callback_query(F.data == 'start_game')
async def start_game(callback_query: types.CallbackQuery):
    await callback_query.answer()

    # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ü–≤–µ—Ç–∞ —Ñ–∏–≥—É—Ä
    color_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ß–µ—Ä–Ω—ã–µ", callback_data="color_black")],
        [InlineKeyboardButton(text="–ë–µ–ª—ã–µ", callback_data="color_white")]
    ])
    await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏ —Ü–≤–µ—Ç —Ñ–∏–≥—É—Ä, –∑–∞ –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥–µ—à—å –∏–≥—Ä–∞—Ç—å:",
                           reply_markup=color_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ü–≤–µ—Ç–∞
@dp.callback_query(F.data.in_({'color_black', 'color_white'}))
async def choose_color(callback_query: types.CallbackQuery):
    await callback_query.answer()

    color = "—á–µ—Ä–Ω—ã–µ" if callback_query.data == 'color_black' else "–±–µ–ª—ã–µ"
    user_id = callback_query.from_user.id

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–æ—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_board_states[user_id] = {
        "board": initialize_board(color),
        "selected_piece": None
    }

    await bot.send_message(callback_query.from_user.id, f"–¢—ã –≤—ã–±—Ä–∞–ª {color} —Ñ–∏–≥—É—Ä—ã. –ù–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É!")

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —à–∞—Ö–º–∞—Ç–Ω–æ–π –¥–æ—Å–∫–∏
    keyboard = generate_chessboard_inline_keyboard(user_board_states[user_id]["board"])
    await bot.send_message(callback_query.from_user.id, "–®–∞—Ö–º–∞—Ç–Ω–∞—è –¥–æ—Å–∫–∞:", reply_markup=keyboard)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —à–∞—Ö–º–∞—Ç–Ω–æ–π –¥–æ—Å–∫–∏
def initialize_board(color):
    if color == '—á–µ—Ä–Ω—ã–µ':
        board = [
            ["‚ôú", "‚ôû", "‚ôù", "‚ôõ", "‚ôö", "‚ôù", "‚ôû", "‚ôú"],  # 8
            ["‚ôü"] * 8,  # 7
            [" "] * 8,  # 6
            [" "] * 8,  # 5
            [" "] * 8,  # 4
            [" "] * 8,  # 3
            ["‚ôô"] * 8,  # 2
            ["‚ôñ", "‚ôò", "‚ôó", "‚ôï", "‚ôî", "‚ôó", "‚ôò", "‚ôñ"]  # 1
        ]
    else:
        board = [
            ["‚ôñ", "‚ôò", "‚ôó", "‚ôï", "‚ôî", "‚ôó", "‚ôò", "‚ôñ"],  # 8
            ["‚ôô"] * 8,  # 7
            [""] * 8,  # 6
            [" "] * 8,  # 5
            [" "] * 8,  # 4
            [" "] * 8,  # 3
            ["‚ôü"] * 8,  # 2
            ["‚ôú", "‚ôû", "‚ôù", "‚ôõ", "‚ôö", "‚ôù", "‚ôû", "‚ôú"]  # 1
        ]
    return board


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —à–∞—Ö–º–∞—Ç–Ω–æ–π –¥–æ—Å–∫–∏ –∫–∞–∫ inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def generate_chessboard_inline_keyboard(board):
    inline_keyboard = []
    for rank in range(8):
        row_buttons = []
        for file in range(8):
            piece = board[rank][file]
            callback_data = f"piece_{rank}_{file}" if piece != " " else f"move_{rank}_{file}"
            row_buttons.append(InlineKeyboardButton(text=piece, callback_data=callback_data))
        inline_keyboard.append(row_buttons)
    return InlineKeyboardMarkup(inline_keyboard=inline_keyboard)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–ª–µ—Ç–∫–∏ –¥–æ—Å–∫–∏
@dp.callback_query(F.data.startswith('move_') | F.data.startswith('piece_'))
async def handle_board_action(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    if user_id not in user_board_states:
        await callback_query.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É —Å –ø–æ–º–æ—â—å—é /start.")
        return

    board = user_board_states[user_id]["board"]
    selected_piece = user_board_states[user_id]["selected_piece"]
    data = callback_query.data.split('_')

    action = data[0]
    rank = int(data[1])
    file = int(data[2])

    if action == 'piece':
        piece = board[rank][file]
        if piece == " ":
            await callback_query.answer("–ü—É—Å—Ç–∞—è –∫–ª–µ—Ç–∫–∞.")
            return
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ñ–∏–≥—É—Ä—É
        user_board_states[user_id]["selected_piece"] = (rank, file)
        await callback_query.answer(f"–í—ã–±—Ä–∞–Ω–∞ —Ñ–∏–≥—É—Ä–∞: {piece} –Ω–∞ {chr(65 + file)}{8 - rank}")
    elif action == 'move':
        if selected_piece:
            start_rank, start_file = selected_piece
            piece = board[start_rank][start_file]
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ–ø—É—Å—Ç–∏–º–æ—Å—Ç–∏ —Ö–æ–¥–∞
            board[rank][file] = piece
            board[start_rank][start_file] = " "
            # –û—á–∏—Å—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ñ–∏–≥—É—Ä—ã
            user_board_states[user_id]["selected_piece"] = None
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            keyboard = generate_chessboard_inline_keyboard(board)
            await bot.edit_message_reply_markup(chat_id=user_id, message_id=callback_query.message.message_id,
                                                reply_markup=keyboard)
            await callback_query.answer(f"–§–∏–≥—É—Ä–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –Ω–∞ {chr(65 + file)}{8 - rank}")
        else:
            await callback_query.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–≥—É—Ä—É –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è.")


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)


# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ª–æ–≤–∏–µ –¥–ª—è —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞
if __name__ == '__main__':
    asyncio.run(main())