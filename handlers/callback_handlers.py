import asyncio
import logging
import datetime

from aiogram import F
from aiogram import Router, types
from aiogram.exceptions import TelegramBadRequest
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, LabeledPrice
from chess import Piece
from sqlalchemy.exc import SQLAlchemyError
from sqlalchemy.future import select

from database.orm_query import add_diamonds_to_user, get_user_rating
from market.market import buy_options,PAYMENTS_PROVIDER_TOKEN
from config import bot
from database.db import User, ClanMember, Clan, ShopItem, Purchase, Statistic
from database.db import session_maker
from gameLogic.game import Lobby
from kbds.State import FeedbackState, ProfileState, ClanState, PublicState,PrivateState
from kbds.inline import clan_actions, stat_keyboard, main_menu_keyboard, keyboards, event_board, claim_gift_board, \
   menu_button
from utils.game_relation import get_game, board_update, send_board, games, lobbies

callback_router = Router()



#–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"
@callback_router.callback_query(F.data == 'profile')
async def profile(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    async with session_maker() as session:  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é
        try:
            # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ SQLAlchemy –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            result = await session.execute(select(User).filter(User.user_id == user_id))
            user = result.scalars().first()  # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

            if user:
                await callback_query.message.answer(
                    f"–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n"
                    f"–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.username}\n"
                    f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥: {user.wins} üèÜ\n"
                    f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä–∞–∂–µ–Ω–∏–π: {user.losses} üòî\n"
                    f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∏—á—å–∏—Ö: {user.draws} ‚òØÔ∏è\n"
                    f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—ã—Ö –ø–∞—Ä—Ç–∏–π: {user.total_games} üéÆ\n"
                    f"–ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥: {user.win_percentage}% üéØ\n"
                    f"–ë–∞–ª–∞–Ω—Å: {user.diamonds} üíé\n"
                    f"–†–µ–π—Ç–∏–Ω–≥: {user.rating}üéñ\n"
                    f"–ú–µ—Å—Ç–æ –≤ –¢–û–ü–µ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É: {user.rang}üëë\n"
                )
            else:
                # –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ—Ç, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –µ–≥–æ —Å–æ–∑–¥–∞—Ç—å
                await callback_query.message.answer(
                    "–ü–æ—Ö–æ–∂–µ, —É –≤–∞—Å –µ—â–µ –Ω–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è. –î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –µ–≥–æ!\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à username:"
                )
                await state.set_state(ProfileState.waiting_for_username)
        except Exception as e:
            await callback_query.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

#–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback_query –¥–ª—è –∫–Ω–æ–ø–∫–∏ –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤
@callback_router.callback_query(F.data == 'feedback')
async def handle_feedback(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π –æ—Ç–∑—ã–≤:")
    await state.set_state(FeedbackState.waiting_for_feedback)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ö–ª–∞–Ω—ã"
@callback_router.callback_query(F.data == "clan")
async def handle_clan_button(callback: types.CallbackQuery):
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=clan_actions)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–Ω–∞
@callback_router.callback_query(F.data == "create_clan")
async def process_create_clan(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id

    async with session_maker() as session:
        try:
            # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ SQLAlchemy –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            result = await session.execute(select(User).filter(User.user_id == user_id))
            user = result.scalars().first()  # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

            if not user:
                await callback.message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
                return
            result2 = await session.execute(select(ClanMember).filter(ClanMember.user_id==user_id))
            clan_m = result2.scalars().first()
            if clan_m:
                await callback.message.answer(
                     '–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –∫–ª–∞–Ω –ø–æ–∫–∞ –≤—ã —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ, —Å–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∏–Ω—å—Ç–µ –∫–ª–∞–Ω'
                )
                return


            if user.diamonds < 200:
                await callback.message.answer(
                    "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–Ω–∞. –¢—Ä–µ–±—É–µ—Ç—Å—è 200 –∞–ª–º–∞–∑–æ–≤. \n"
                    "–ü–æ–ø–æ–ª–Ω–∏—Ç—å –∞–ª–º–∞–∑—ã –º–æ–∂–Ω–æ –Ω–∞ –≤–∫–ª–∞–¥–∫–µ –ú–æ–π –±–∞–ª–∞–Ω—Å"
                )
                return

            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã
            await callback.message.answer(
                "–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–Ω–∞ —Å—Ç–æ–∏—Ç 200 –∞–ª–º–∞–∑–∏–∫–æ–≤. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.",
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=[
                        [InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_payment")],
                        [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_payment")]
                    ]
                )
            )
        except SQLAlchemyError as e:
            logging.error(f"Database error: {e}")
            await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")

    await state.clear()


#–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–ø–ª–∞—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–Ω–∞
@callback_router.callback_query(F.data == "confirm_payment")
async def confirm_payment(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id

    async with session_maker() as session:
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
            user = await session.scalar(select(User).where(User.user_id == user_id))

            if not user:
                await callback_query.message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
                return

            if user.diamonds < 200:
                await callback_query.message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–Ω–∞.")
                return

            # –°–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤
            user.diamonds -= 200
            await session.commit()

            await callback_query.message.answer(
                "–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–∞. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–≥–æ –∫–ª–∞–Ω–∞:"
            )

            # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ª–æ–≥–∏–∫–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–Ω–∞ ‚Äî —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.set_state(ClanState.enter_name)

        except SQLAlchemyError as e:
            logging.error(f"Database error: {e}")
            await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")


@callback_router.message(ClanState.enter_name)
async def process_clan_name(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    clan_name = message.text

    async with session_maker() as session:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∏–º–µ–Ω–∏ –∫–ª–∞–Ω–∞
            result = await session.execute(select(Clan).where(Clan.name == clan_name))
            if result.scalars().first():
                await message.answer("–ö–ª–∞–Ω —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ.")
                return

            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–ª–∞–Ω
            new_clan = Clan(name=clan_name, leader_id=user_id)
            session.add(new_clan)
            await session.flush()  # –ü—Ä–∏–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å id –Ω–æ–≤–æ–≥–æ –∫–ª–∞–Ω–∞

            # –ü–æ–ª—É—á–∞–µ–º id –Ω–æ–≤–æ–≥–æ –∫–ª–∞–Ω–∞
            clan_id = new_clan.id

            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–ª–µ–Ω—ã –∫–ª–∞–Ω–∞
            new_member = ClanMember(clan_id=clan_id, user_id=user_id)
            session.add(new_member)
            await session.commit()

            await message.answer(f"–ö–ª–∞–Ω '{clan_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
        except Exception as e:
            await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∞–Ω–∞: {str(e)}")

    await state.clear()



#–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–Ω–∞
@callback_router.callback_query(F.data == "cancel_payment")
async def cancel_payment(callback_query: types.CallbackQuery):
    await callback_query.message.answer("–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")


#–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –≤ –∫–ª–∞–Ω
@callback_router.callback_query(F.data == "join_clan")
async def process_list_clans(callback: types.CallbackQuery):
    user_id = callback.from_user.id  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    async with session_maker() as session:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –∫–∞–∫–æ–º-–ª–∏–±–æ –∫–ª–∞–Ω–µ
            existing_member = await session.execute(
                select(ClanMember).filter(ClanMember.user_id == user_id)
            )
            if existing_member.scalars().first():
                await callback.message.answer("–í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ. –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∏–Ω—å—Ç–µ —Ç–µ–∫—É—â–∏–π –∫–ª–∞–Ω, —á—Ç–æ–±—ã –≤—Å—Ç—É–ø–∏—Ç—å –≤ –¥—Ä—É–≥–æ–π.")
                return

            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–ª–∞–Ω–æ–≤
            result = await session.execute(select(Clan))
            clans = result.scalars().all()

            if not clans:
                await callback.message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–ª–∞–Ω–æ–≤ –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è.")
                return

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –∫–ª–∞–Ω–∞–º–∏
            clan_buttons = [
                [InlineKeyboardButton(text=clan.name, callback_data=f"join_{clan.clan_id}")]
                for clan in clans
            ]
            clan_list_kb = InlineKeyboardMarkup(inline_keyboard=clan_buttons)

            await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞–Ω –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è:", reply_markup=clan_list_kb)
        except Exception as e:
            await callback.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
# –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤ –∫–ª–∞–Ω
@callback_router.callback_query(F.data.startswith("join_"))
async def join_clan(callback: types.CallbackQuery):
    clan_id = int(callback.data.split("_")[1])
    user_id = callback.from_user.id

    async with session_maker() as session:
        try:
            logging.info(f"User {user_id} attempting to join clan {clan_id}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–ª–∞–Ω
            clan_result = await session.execute(
                select(Clan).where(Clan.clan_id == clan_id)
            )
            clan = clan_result.scalars().first()
            if not clan:
                await callback.message.answer("–ö–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return

            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–ª–∞–Ω
            new_member = ClanMember(clan_id=clan_id, user_id=user_id)
            session.add(new_member)
            await session.commit()

            await callback.message.answer(f"–í—ã —É—Å–ø–µ—à–Ω–æ –≤—Å—Ç—É–ø–∏–ª–∏ –≤ –∫–ª–∞–Ω '{clan.name}'!")
        except Exception as e:
            logging.exception(f"Error: {e}")
            await callback.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")


#–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –∫–ª–∞–Ω–∞–º–∏
@callback_router.callback_query(F.data == 'manage_clan')
async def manage_clan(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    async with session_maker() as session:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–ª–∞–Ω
            clan_result = await session.execute(
                select(ClanMember).where(ClanMember.user_id == user_id)
            )
            clan = clan_result.scalars().first()

            if not clan:
                await callback.message.answer("–ö–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            cur_clan_id = clan.clan_id
            clan_info = await session.execute(
                select(Clan).where(Clan.clan_id == cur_clan_id)
            )
            clan_obj = clan_info.scalars().first()
            leader_id = clan_obj.leader_id

            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —á–ª–µ–Ω–æ–≤ –∫–ª–∞–Ω–∞
            members_result = await session.execute(
                select(User)
                .join(ClanMember, User.user_id == ClanMember.user_id)
                .filter(ClanMember.clan_id == cur_clan_id)
            )
            members = members_result.scalars().all()

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–ª–∞–Ω–∞
            member_list = []
            for member in members:
                text = f"{member.username} - —Ä–µ–π—Ç–∏–Ω–≥{member.rating}üéñÔ∏è {'(–õ–∏–¥–µ—Ä)' if member.user_id == leader_id else ''}"
                member_list.append(text)
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –∫–ª–∞–Ω–∞
            await callback.message.answer(
                f"–£—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–ª–∞–Ω–∞: {clan_obj.name}\n\n{chr(10).join(member_list)}",
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=[[
                        InlineKeyboardButton(text=f"–ù–∞–∑–∞–¥", callback_data="back_to_main_menu")
                    ]]
                ),
                parse_mode='HTML'
            )

        except SQLAlchemyError as e:
            logging.error(f"Database error: {e}")
            await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∞–Ω–µ.")



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è "–¢–æ–ø 100 –∏–≥—Ä–æ–∫–æ–≤"
@callback_router.callback_query(F.data == 'top100')
async def handle_top100(callback_query: types.CallbackQuery):
    try:
        async with session_maker() as session:
            result = await session.execute(select(User).order_by(User.win_percentage.desc()).limit(100))
            top_users = result.scalars().all()

            if top_users:
                response = "üèÜ –¢–æ–ø 100 –∏–≥—Ä–æ–∫–æ–≤ –ø–æ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—é –ø–æ–±–µ–¥:\n"
                for i, user in enumerate(top_users, start=1):
                    response += f"{i}. {user.username} - {user.win_percentage}% –ø–æ–±–µ–¥\n"
            else:
                response = "–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¢–æ–ø 100."

        await callback_query.message.answer(response)
    except Exception as e:
        await callback_query.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¢–æ–ø 100: {str(e)}")



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ú–∞–≥–∞–∑–∏–Ω"
@callback_router.callback_query(F.data == 'shop')
async def handle_shop(callback_query: types.CallbackQuery):
    try:
        async with session_maker() as session:
            # –ó–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤
            result = await session.execute(select(ShopItem))
            items = result.scalars().all()  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã

            if items:
                # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä—ã –µ—Å—Ç—å, —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
                response = "üõçÔ∏è –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤:\n"

                # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
                keyboard = InlineKeyboardMarkup(inline_keyboard=[], row_width=1)

                for item in items:
                    response += f"üõí {item.name}\n–û–ø–∏—Å–∞–Ω–∏–µ: {item.description}\n–¶–µ–Ω–∞: {item.price} üíé\n\n"

                    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Ç–æ–≤–∞—Ä–∞
                    buy_button = InlineKeyboardButton(
                        text=f"üíµ–ö—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä {item.name} {item.description}",
                        callback_data=f"buy_{item.item_id}"
                    )

                    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                    keyboard.inline_keyboard.append([buy_button])
                    f =[InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_main_menu")]
                keyboard.inline_keyboard.append(f)
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
                await callback_query.message.answer(response, reply_markup=keyboard)
            else:
                # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ—Ç, —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º
                response = "–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø—É—Å—Ç."
                await callback_query.message.answer(response)

    except Exception as e:
        await callback_query.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤: {str(e)}")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ö—É–ø–∏—Ç—å"
@callback_router.callback_query(F.data.startswith('buy_'))
async def handle_buy(callback_query: types.CallbackQuery):
    try:
        item_id = int(callback_query.data.split('_')[1])
        user_id = callback_query.from_user.id  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        async with session_maker() as session:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
            item = await session.get(ShopItem, item_id)
            user = await session.get(User, user_id)

            if not item:
                await callback_query.message.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return

            if not user:
                await callback_query.message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ
            if user.diamonds < item.price:
                await callback_query.message.answer(f"–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ üíé –¥–ª—è –ø–æ–∫—É–ø–∫–∏ {item.name}.")
                return

            # –ï—Å–ª–∏ —Å—Ä–µ–¥—Å—Ç–≤ —Ö–≤–∞—Ç–∞–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
            user.diamonds -= item.price

            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É –ø–æ–∫—É–ø–æ–∫
            new_purchase = Purchase(user_id=user_id, item_id=item_id, name=item.name, description=item.description)
            session.add(new_purchase)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            await session.commit()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–∫—É–ø–∫–µ
            await callback_query.message.answer(f"–í—ã –∫—É–ø–∏–ª–∏ {item.name} –∑–∞ {item.price} üíé!")


    except Exception as e:
        await callback_query.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–∫—É–ø–∫–∏: {str(e)}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–∫—É–ø–∫–∏"
@callback_router.callback_query(F.data == 'purchases')
async def handle_purchases(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    try:
        async with session_maker() as session:
            # –ó–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–∫—É–ø–æ–∫, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            result = await session.execute(
                select(Purchase).where(Purchase.user_id == user_id)
            )
            purchases = result.scalars().all()

            if purchases:
                # –ï—Å–ª–∏ –ø–æ–∫—É–ø–∫–∏ –µ—Å—Ç—å, —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
                response = "üõí –í–∞—à–∏ –ø–æ–∫—É–ø–∫–∏:\n"

                # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
                keyboard = InlineKeyboardMarkup(inline_keyboard=[], row_width=1)

                back_button = InlineKeyboardButton(
                    text="–ü–µ—Ä–µ–π—Ç–∏ –≤ –º–∞–≥–∞–∑–∏–Ω",
                    callback_data="shop"
                )
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                keyboard.inline_keyboard.append([back_button])

                for purchase in purchases:
                    response += f"üì¶ {purchase.name}\n–û–ø–∏—Å–∞–Ω–∏–µ: {purchase.description}\n"

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–∫—É–ø–∫–∞–º–∏
                await callback_query.message.answer(response, reply_markup=keyboard)
            else:
                # –ï—Å–ª–∏ –ø–æ–∫—É–ø–æ–∫ –Ω–µ—Ç
                await callback_query.message.answer("–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –ø–æ–∫—É–ø–æ–∫.")

    except Exception as e:
        await callback_query.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–∫—É–ø–æ–∫: {str(e)}")


# @callback_router.callback_query(ProfileState.waiting_for_username)
# async def callback_handler(callback_query: types.CallbackQuery):
#     data = callback_query.data.split(':')
#     user_id: int = callback_query.from_user.id
#     game_id = int(data[0])
#     cell_id = data[1]
#
#     game = await get_game(callback_query, game_id)
#     if game is None:
#         return
#
#     if cell_id in ('4', '3', '5', '2'):
#         last_move = game.board.pop()
#         last_move.promotion = int(cell_id)
#         game.board.push(last_move)
#
#         async with asyncio.TaskGroup() as tg:
#             tg.create_task(bot.delete_message(user_id, callback_query.message.message_id))
#             tg.create_task(board_update(game))
#
#         game.choosing_shape = -1
#         return
#
#     if game.choosing_shape != -1:
#         await callback_query.answer()
#         return
#
#     mess, update_board = game.click(cell_id, user_id)
#     outcome_message = await game.get_outcome_message()
#     if outcome_message is not None:
#         await board_update(game, True)
#         games.remove(game)
#         return
#
#     if mess is not None:
#         if mess == '–ü—Ä–µ–≤—Ä–∞—â–µ–Ω–∏–µ':
#             await bot.send_message(chat_id=user_id,
#                                    text='–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–≥—É—Ä—É:',
#                                    reply_markup=InlineKeyboardMarkup(
#                                        inline_keyboard=[
#                                            [InlineKeyboardButton(
#                                                text=Piece(i, game.board.turn).unicode_symbol(invert_color=True),
#                                                callback_data=f'{game_id}:{i}')
#                                                for i in (4, 3, 5, 2)]]))
#         else:
#             await callback_query.answer(text=mess)
#     if update_board:
#         try:
#             await board_update(game)  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
#         except TelegramBadRequest:
#             print('–æ–π')
#             await callback_query.answer()


@callback_router.callback_query(F.data == 'public_game')
async def public_game(callback_query: types.CallbackQuery,state: FSMContext):

    user_id: int = callback_query.from_user.id
    await callback_query.answer()
    current_state = await state.get_state()
    if current_state == PublicState.waiting_for_pub:
        await bot.send_message(user_id, "–í—ã —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø–æ–∏—Å–∫–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞.")
        return

    lobby: Lobby = next(filter(lambda s_lobby: not s_lobby.private and
                                               not s_lobby.rank and
                                               s_lobby.first_player != user_id,
                               lobbies), None)
    if lobby is None:
        lobbies.append(Lobby(user_id))
        await state.set_state(PublicState.waiting_for_pub)
        await bot.send_message(user_id, '–ò—â–µ–º –¥–ª—è –≤–∞—Å –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞.')
        return
    else:

        game = lobby.start_game(user_id)
        lobbies.remove(lobby)
        games.append(game)
        await send_board(game)
        await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–≥—Ä—ã —Å –¥—Ä—É–≥–æ–º
@callback_router.callback_query(F.data == 'friendGame')
async def friend_game(callback_query: types.CallbackQuery):
    user_id: int = callback_query.from_user.id
    await callback_query.answer()

    lobby: Lobby = Lobby(user_id, private=True)
    lobbies.append(lobby)

    # –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–¥–æ–º –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥—Ä—É–≥–∞
    await bot.send_message(user_id,
                           f"–ö–æ–¥ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥—Ä—É–≥–∞: {lobby.private_code}. –ü–µ—Ä–µ–¥–∞–π—Ç–µ –µ–≥–æ –¥—Ä—É–≥—É –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.")





#
# # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–≥—Ä—ã —Å –¥—Ä—É–≥–æ–º
# @callback_router.callback_query(F.data == 'friendGame')
# async def friend_game(callback_query: types.CallbackQuery):
#     await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ :", reply_markup=private_board)
#     # await callback_query.answer()


# # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–≥—Ä—ã —Å –¥—Ä—É–≥–æ–º
# @callback_router.callback_query(F.data == 'get')
# async def get_code(callback_query: types.CallbackQuery, state: FSMContext):
#     user_id: int = callback_query.from_user.id
#     await bot.send_message(user_id,f" –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
#     await state.set_state(PrivateState.waiting_for_code)
#
#
# # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–≥—Ä—ã —Å –¥—Ä—É–≥–æ–º
# @callback_router.callback_query(F.data == 'create')
# async def create_code(callback_query: types.CallbackQuery,state: FSMContext):
#     user_id: int = callback_query.from_user.id
#     lobby: Lobby = Lobby(user_id, private=True)
#     lobbies.append(lobby)
#
#     # –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–¥–æ–º –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥—Ä—É–≥–∞
#     await bot.send_message(user_id,
#                            f"–ö–æ–¥ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥—Ä—É–≥–∞: {lobby.private_code}. –ü–µ—Ä–µ–¥–∞–π—Ç–µ –µ–≥–æ –¥—Ä—É–≥—É –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.")
#     await state.set_state(PrivateState.waiting_for_friend_join)

# #–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω–æ–π –∏–≥—Ä—ã
# @callback_router.callback_query(PublicState.waiting_for_pub)
# async def callback_public_game(callback_query: types.CallbackQuery, state: FSMContext):
#     data = callback_query.data.split(':')
#     user_id: int = callback_query.from_user.id
#     game_id = int(data[0])
#     cell_id = data[1]
#
#     game = await get_game(callback_query, game_id)
#     if game is None:
#         return
#
#     if cell_id in ('4', '3', '5', '2'):
#         last_move = game.board.pop()
#         last_move.promotion = int(cell_id)
#         game.board.push(last_move)
#
#         async with asyncio.TaskGroup() as tg:
#             tg.create_task(bot.delete_message(user_id, callback_query.message.message_id))
#             tg.create_task(board_update(game))
#
#         game.choosing_shape = -1
#         return
#
#     if game.choosing_shape != -1:
#         await callback_query.answer()
#         return
#
#     mess, update_board = game.click(cell_id, user_id)
#     outcome_message = await game.get_outcome_message()
#
#     if outcome_message is not None:
#         await board_update(game, True)
#         games.remove(game)
#         return
#
#     if mess is not None:
#         if mess == '–ü—Ä–µ–≤—Ä–∞—â–µ–Ω–∏–µ':
#             await bot.send_message(
#                 chat_id=user_id,
#                 text='–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–≥—É—Ä—É:',
#                 reply_markup=InlineKeyboardMarkup(
#                     inline_keyboard=[
#                         [InlineKeyboardButton(
#                             text=Piece(i, game.board.turn).unicode_symbol(invert_color=True),
#                             callback_data=f'{game_id}:{i}'
#                         ) for i in (4, 3, 5, 2)]
#                     ]
#                 )
#             )
#         else:
#             await callback_query.answer(text=mess)
#
#     if update_board:
#         try:
#             await board_update(game)  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
#         except TelegramBadRequest:
#             print('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–æ—Å–∫–∏')
#             await callback_query.answer()
#
#     # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Å—Ç–∞—ë—Ç—Å—è –≤ waiting_for_pub_game
#     await state.set_state(PublicState.waiting_for_pub_game)
#
#
# @callback_router.callback_query(PublicState.waiting_for_pub_game)
# async def callback_click_public_game(callback_query: types.CallbackQuery, state: FSMContext):
#     data = callback_query.data.split(':')
#     user_id: int = callback_query.from_user.id
#     game_id = int(data[0])
#     cell_id = data[1]
#
#     game = await get_game(callback_query, game_id)
#     if game is None:
#         return
#
#     if cell_id in ('4', '3', '5', '2'):
#         last_move = game.board.pop()
#         last_move.promotion = int(cell_id)
#         game.board.push(last_move)
#
#         async with asyncio.TaskGroup() as tg:
#             tg.create_task(bot.delete_message(user_id, callback_query.message.message_id))
#             tg.create_task(board_update(game))
#
#         game.choosing_shape = -1
#         return
#
#     if game.choosing_shape != -1:
#         await callback_query.answer()
#         return
#
#     mess, update_board = game.click(cell_id, user_id)
#     outcome_message = await game.get_outcome_message()
#
#     if outcome_message is not None:
#         await board_update(game, True)
#         games.remove(game)
#         return
#
#     if mess is not None:
#         if mess == '–ü—Ä–µ–≤—Ä–∞—â–µ–Ω–∏–µ':
#             await bot.send_message(
#                 chat_id=user_id,
#                 text=f'–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–≥—É—Ä—É:',
#                 reply_markup=InlineKeyboardMarkup(
#                     inline_keyboard=[
#                         [InlineKeyboardButton(
#                             text=Piece(i, game.board.turn).unicode_symbol(invert_color=True),
#                             callback_data=f'{game_id}:{i}'
#                         ) for i in (4, 3, 5, 2)]
#                     ]
#                 )
#             )
#         else:
#             await callback_query.answer(text=mess)
#
#     if update_board:
#         try:
#             await board_update(game)  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
#         except TelegramBadRequest:
#             print('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–æ—Å–∫–∏')
#             await callback_query.answer()
#
#     # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Å—Ç–∞—ë—Ç—Å—è –≤ waiting_for_pub_game
#     await state.clear()
#     await state.set_state(PublicState.waiting_for_pub_game)


# #–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ–π –∏–≥—Ä—ã
# @callback_router.callback_query(PrivateState.waiting_for_private)
# async def callback_private_game(callback_query: types.CallbackQuery, state: FSMContext):
#     data = callback_query.data.split(':')
#     user_id: int = callback_query.from_user.id
#     game_id = int(data[0])
#     cell_id = data[1]
#
#     game = await get_game(callback_query, game_id)
#     if game is None:
#         return
#
#     if cell_id in ('4', '3', '5', '2'):
#         last_move = game.board.pop()
#         last_move.promotion = int(cell_id)
#         game.board.push(last_move)
#
#         async with asyncio.TaskGroup() as tg:
#             tg.create_task(bot.delete_message(user_id, callback_query.message.message_id))
#             tg.create_task(board_update(game))
#
#         game.choosing_shape = -1
#         return
#
#     if game.choosing_shape != -1:
#         await callback_query.answer()
#         return
#
#     mess, update_board = game.click(cell_id, user_id)
#     outcome_message = await game.get_outcome_message()
#
#     if outcome_message is not None:
#         await board_update(game, True)
#         games.remove(game)
#         return
#
#     if mess is not None:
#         if mess == '–ü—Ä–µ–≤—Ä–∞—â–µ–Ω–∏–µ':
#             await bot.send_message(
#                 chat_id=user_id,
#                 text='–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–≥—É—Ä—É:',
#                 reply_markup=InlineKeyboardMarkup(
#                     inline_keyboard=[
#                         [InlineKeyboardButton(
#                             text=Piece(i, game.board.turn).unicode_symbol(invert_color=True),
#                             callback_data=f'{game_id}:{i}'
#                         ) for i in (4, 3, 5, 2)]
#                     ]
#                 )
#             )
#         else:
#             await callback_query.answer(text=mess)
#
#     if update_board:
#         try:
#             await board_update(game)  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
#         except TelegramBadRequest:
#             print('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–æ—Å–∫–∏')
#             await callback_query.answer()
#
#     # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Å—Ç–∞—ë—Ç—Å—è –≤ waiting_for_pub_game
#     await state.clear()
#     await state.set_state(PrivateState.waiting_for_private_game)


@callback_router.callback_query(PrivateState.waiting_for_private_game)
async def callback_click_private_game(callback_query: types.CallbackQuery, state: FSMContext):
    data = callback_query.data.split(':')
    user_id: int = callback_query.from_user.id
    game_id = int(data[0])
    cell_id = data[1]

    game = await get_game(callback_query, game_id)
    if game is None:
        return

    if cell_id in ('4', '3', '5', '2'):
        last_move = game.board.pop()
        last_move.promotion = int(cell_id)
        game.board.push(last_move)

        async with asyncio.TaskGroup() as tg:
            tg.create_task(bot.delete_message(user_id, callback_query.message.message_id))
            tg.create_task(board_update(game))

        game.choosing_shape = -1
        return

    if game.choosing_shape != -1:
        await callback_query.answer()
        return

    mess, update_board = game.click(cell_id, user_id)
    outcome_message = await game.get_outcome_message()

    if outcome_message is not None:
        await board_update(game, True)
        games.remove(game)
        return

    if mess is not None:
        if mess == '–ü—Ä–µ–≤—Ä–∞—â–µ–Ω–∏–µ':
            await bot.send_message(
                chat_id=user_id,
                text=f'–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–≥—É—Ä—É:',
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=[
                        [InlineKeyboardButton(
                            text=Piece(i, game.board.turn).unicode_symbol(invert_color=True),
                            callback_data=f'{game_id}:{i}'
                        ) for i in (4, 3, 5, 2)]
                    ]
                )
            )
        else:
            await callback_query.answer(text=mess)

    if update_board:
        try:
            await board_update(game)  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        except TelegramBadRequest:
            print('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–æ—Å–∫–∏')
            await callback_query.answer()

    # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Å—Ç–∞—ë—Ç—Å—è –≤ waiting_for_pub_game
    await state.set_state(PublicState.waiting_for_pub_game)

@callback_router.callback_query(F.data == 'statistics')
async def show_statistics(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    async with session_maker() as session:  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é
        try:
            # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ SQLAlchemy –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            result1 = await session.execute(select(Statistic).filter(Statistic.user_id == user_id))
            users = result1.scalars().first()  # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

            if users:
                await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", reply_markup=stat_keyboard)
        except Exception as e:
            await callback_query.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

@callback_router.callback_query(F.data == 'back_to_main_menu')
async def back_to_main_menu(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",reply_markup=main_menu_keyboard)  # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –∏–ª–∏ –¥—Ä—É–≥–∏–µ –∫–Ω–æ–ø–∫–∏


@callback_router.callback_query(
    lambda callback_query: callback_query.data in ['public_stat', 'ranked_stat', 'main_stat', 'private_stat'])
async def in_progres(callback_query: types.CallbackQuery):
    # –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∂–¥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ data –ø–æ —Å–≤–æ–µ–º—É
    if callback_query.data == 'public_stat':
        await callback_query.message.edit_text("–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—É–±–ª–∏—á–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.")
    elif callback_query.data == 'ranked_stat':
        await callback_query.message.edit_text("–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.")
    elif callback_query.data == 'main_stat':
        await callback_query.message.edit_text("–í—ã –≤—ã–±—Ä–∞–ª–∏ –æ—Å–Ω–æ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.")
    elif callback_query.data == 'private_stat':
        await callback_query.message.edit_text("–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–∏–≤–∞—Ç–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    notification_message = await callback_query.message.answer("üõ† –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")

    # –ñ–¥–µ–º 3 —Å–µ–∫—É–Ω–¥—ã
    await asyncio.sleep(3)

    # –£–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    await notification_message.delete()

@callback_router.callback_query(F.data == 'rank_game')
async def rank_game(callback_query: types.CallbackQuery):
    user_id: int = callback_query.from_user.id
    await callback_query.answer()
    # rating = await get_user_rating(user_id)
    # # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω —Ä–µ–π—Ç–∏–Ω–≥–∞
    # if rating < 50:
    #     rating_range = range(0, 51)
    # elif rating < 100:
    #     rating_range = range(51, 100)
    # elif rating < 150:
    #     rating_range = range(100, 1000)
    # else:
    #     await bot.send_message(user_id, '–í–∞—à —Ä–µ–π—Ç–∏–Ω–≥ —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫ –¥–ª—è —ç—Ç–æ–π –∏–≥—Ä—ã.')
    #     return

    lobby: Lobby = next(filter(lambda s_lobby: not s_lobby.private and
                                            s_lobby.rank and
                                               s_lobby.first_player != user_id,
                               lobbies), None)

    if lobby is None:
        lobbies.append(Lobby(user_id, rank=True))
        await bot.send_message(user_id, '–ò—â–µ–º –¥–ª—è –≤–∞—Å –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞.')
    else:
        game = lobby.start_game(user_id)
        lobbies.remove(lobby)
        games.append(game)
        await send_board(game)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ú–∞–≥–∞–∑–∏–Ω"
@callback_router.callback_query(F.data == 'myBalance')
async def handle_sh(callback_query: types.CallbackQuery):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–ª–º–∞–∑–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏:", reply_markup=keyboards)

@callback_router.callback_query(F.data.startswith("Bbuy_"))
async def handle_buy(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    try:
        item_id = callback_query.data.split('_')[1]  # –ü–æ–ª—É—á–∞–µ–º ID —Ç–æ–≤–∞—Ä–∞
        if item_id not in buy_options:
            await callback_query.message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.")
            return

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ç–æ–≤–∞—Ä–µ
        item = buy_options[item_id]
        price_in_rub = item["price"]  # –¶–µ–Ω–∞ –≤ —Ä—É–±–ª—è—Ö
        diamonds = item["amount"]  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–ª–º–∞–∑–æ–≤

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–µ–Ω—É –≤ –∫–æ–ø–µ–π–∫–∞—Ö (–Ω—É–∂–Ω–æ –¥–ª—è LabeledPrice)
        prices = [LabeledPrice(label=diamonds, amount=price_in_rub * 100)]

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–≤–æ–π—Å
        await bot.send_invoice(
            chat_id=user_id,
            title=f"–ü–æ–∫—É–ø–∫–∞ üíé",
            description=f"–û–ø–ª–∞—Ç –∑–∞ {diamonds}.",
            payload=f"buy_{item_id}",  # –ü–æ–ª–µ–∑–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            provider_token=PAYMENTS_PROVIDER_TOKEN,
            currency="RUB",
            prices=prices,
            start_parameter="purchase"
        )
    except Exception as e:
        await callback_query.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
gift_claim_times = {}
# –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–∏—Ö —Å–æ–±—ã—Ç–∏–π



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–æ–±—ã—Ç–∏—è"
@callback_router.callback_query(F.data == 'event')
async def handle_event(callback_query: types.CallbackQuery):

    await callback_query.message.answer(text='–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è', reply_markup=event_board)



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Å–æ–±—ã—Ç–∏—è "–†–µ–ª–∏–∑ –ø—Ä–æ–µ–∫—Ç–∞"
@callback_router.callback_query(F.data == 'release_event')
async def handle_release_event(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    now = datetime.datetime.now()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ 24 —á–∞—Å–∞ —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–±–æ—Ä–∞ –ø–æ–¥–∞—Ä–∫–∞
    if user_id in gift_claim_times and (now - gift_claim_times[user_id]).total_seconds() < 86400:
        time_left = 86400 - (now - gift_claim_times[user_id]).total_seconds()
        hours = int(time_left // 3600)
        minutes = int((time_left % 3600) // 60)
        seconds = int(time_left % 60)
        await callback_query.answer(f"–ü–æ–¥–∞—Ä–æ–∫ –º–æ–∂–Ω–æ –∑–∞–±—Ä–∞—Ç—å —á–µ—Ä–µ–∑ {hours} —á–∞—Å–æ–≤, {minutes} –º–∏–Ω—É—Ç –∏ {seconds} —Å–µ–∫—É–Ω–¥.")
    else:

        await callback_query.message.answer(text='ChessSuaiBot —É–∂–µ –∑–¥–µ—Å—å!', reply_markup=claim_gift_board)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ó–∞–±—Ä–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫"
@callback_router.callback_query(F.data == 'claim_gift')
async def handle_claim_gift(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    gift_claim_times[user_id] = datetime.datetime.now()

    # –î–æ–±–∞–≤–ª—è–µ–º –∞–ª–º–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await add_diamonds_to_user(user_id, 5)

    await callback_query.message.edit_text("–í—ã –ø–æ–ª—É—á–∏–ª–∏ 5 –∞–ª–º–∞–∑–æ–≤! –ü–æ–¥–∞—Ä–æ–∫ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –∑–∞–±—Ä–∞—Ç—å —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞.",reply_markup=menu_button)









@callback_router.callback_query()
async def callback_handler(callback_query: types.CallbackQuery):
    data = callback_query.data.split(':')
    user_id: int = callback_query.from_user.id
    game_id = int(data[0])
    cell_id = data[1]

    game = await get_game(callback_query, game_id)
    if game is None:
        return

    if cell_id in ('4', '3', '5', '2'):
        last_move = game.board.pop()
        last_move.promotion = int(cell_id)
        game.board.push(last_move)

        async with asyncio.TaskGroup() as tg:
            tg.create_task(bot.delete_message(user_id, callback_query.message.message_id))
            tg.create_task(board_update(game))

        game.choosing_shape = -1
        return

    if game.choosing_shape != -1:
        await callback_query.answer()
        return

    mess, update_board = game.click(cell_id, user_id)
    outcome_message = await game.get_outcome_message()
    if outcome_message is not None:
        await board_update(game, True)
        games.remove(game)
        return

    if mess is not None:
        if mess == '–ü—Ä–µ–≤—Ä–∞—â–µ–Ω–∏–µ':
            await bot.send_message(chat_id=user_id,
                                   text='–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–≥—É—Ä—É:',
                                   reply_markup=InlineKeyboardMarkup(
                                       inline_keyboard=[
                                           [InlineKeyboardButton(
                                               text=Piece(i, game.board.turn).unicode_symbol(invert_color=True),
                                               callback_data=f'{game_id}:{i}')
                                               for i in (4, 3, 5, 2)]]))
        else:
            await callback_query.answer(text=mess)
    if update_board:
        try:
            await board_update(game)  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        except TelegramBadRequest:
            print('–æ–π')
            await callback_query.answer()
