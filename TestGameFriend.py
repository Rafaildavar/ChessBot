import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram import F
from aiogram.fsm.storage.memory import MemoryStorage
import random

TOKEN = 'token'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω
bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–æ—Å–∫–∏ –∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ñ–∏–≥—É—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_board_states = {}
games = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–∞—Ö

# –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_profiles = {
    64747383: {
        "name": "–≤–∞—è",
        "rating": 10,
        "total_games": 4,
        "wins": 3,
        "losses": 0,
        "draws": 1,
        "win_percentage": 75.0,
        "win_rank": "2693-3741",
        "rating_rank": "331-354"
    }
}

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command('start'))
async def start_command(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π —Å—ã–≥—Ä–∞–µ–º –≤ —à–∞—Ö–º–∞—Ç—ã?")
    start_button = InlineKeyboardButton(text="–ù–∞—á–∞—Ç—å –∏–≥—Ä—É", callback_data="start_game")
    rank_button = InlineKeyboardButton(text="üéñ–†–µ–π—Ç–∏–Ω–≥–æ–≤–∞—è –∏–≥—Ä–∞", callback_data="rank_game")
    public_button = InlineKeyboardButton(text="–¢–æ–≤–∞—Ä–∏—â–µ—Å–∫–∞—è –∏–≥—Ä–∞", callback_data="public_game")
    practice_button = InlineKeyboardButton(text="ü§ñ–ò–≥—Ä–∞ —Å –±–æ—Ç–æ–º", callback_data="practice_game")
    profile_button = InlineKeyboardButton(text="–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile")
    clan_button = InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–ª–∞–Ω", callback_data="clan")
    FriendGame_button = InlineKeyboardButton(text="–ò–≥—Ä–∞ —Å –¥—Ä—É–≥–æ–º", callback_data="friend_game")
    setting_button = InlineKeyboardButton(text="üõ†–ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="setting")
    top100_button = InlineKeyboardButton(text="üèÜ–¢–æ–ø 100 –∏–≥—Ä–æ–∫–æ–≤", callback_data="top100")
    shop_button = InlineKeyboardButton(text="üí∞–ú–∞–≥–∞–∑–∏–Ω", callback_data="shop")
    myBalance_button = InlineKeyboardButton(text="üíé–ú–æ–π –±–∞–ª–∞–Ω—Å", callback_data="myBalance")
    feadback_button = InlineKeyboardButton(text="üí¨–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data="feadback")

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [start_button],
        [profile_button],
        [clan_button, FriendGame_button],
        [public_button, rank_button],
        [shop_button, myBalance_button],
        [practice_button],
        [feadback_button, setting_button],
        [top100_button]
    ])

    await message.answer("–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Ñ–∏–ª—è
@dp.callback_query(F.data == 'profile')
async def profile(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    profile_data = user_profiles.get(user_id, None)

    if profile_data:
        profile_message = f"""
        üè†Ô∏è –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å:

        –ò–º—è: {profile_data['name']} [{user_id}]
        üéñ –†–µ–π—Ç–∏–Ω–≥: {profile_data['rating']}
        üéÆ –í—Å–µ–≥–æ –∏–≥—Ä: {profile_data['total_games']}
        üèÜ –í—Å–µ–≥–æ –ø–æ–±–µ–¥: {profile_data['wins']}
        ü•¥ –í—Å–µ–≥–æ –ø—Ä–æ–∏–≥—Ä—ã—à–µ–π: {profile_data['losses']}
        ‚òØÔ∏è –í—Å–µ–≥–æ –Ω–∏—á—å–∏—Ö: {profile_data['draws']}
        üéØ –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥: {profile_data['win_percentage']}%

        üèÜ –ú–µ—Å—Ç–æ –≤ –¢–û–ü–µ –ø–æ –ø–æ–±–µ–¥–∞–º: {profile_data['win_rank']}
        üéñ –ú–µ—Å—Ç–æ –≤ –¢–û–ü–µ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É: {profile_data['rating_rank']}
        """
        await callback_query.message.answer(profile_message)
    else:
        await callback_query.message.answer("–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–≥—Ä—ã —Å –¥—Ä—É–≥–æ–º
@dp.callback_query(F.data == 'friend_game')
async def friend_game(callback_query: types.CallbackQuery):
    await callback_query.answer()

    # –°–æ–∑–¥–∞–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ –∏–≥—Ä—ã
    game_code = str(random.randint(1000, 9999))

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–æ—Å–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª—è –∏–≥—Ä—ã
    user_id = callback_query.from_user.id
    games[game_code] = {
        "board": initialize_board('–±–µ–ª—ã–µ'),
        "players": [user_id],
        "turn": '–±–µ–ª—ã–µ'
    }

    # –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–¥–æ–º –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥—Ä—É–≥–∞
    await bot.send_message(callback_query.from_user.id,
                           f"–ö–æ–¥ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥—Ä—É–≥–∞: {game_code}. –ü–µ—Ä–µ–¥–∞–π—Ç–µ –µ–≥–æ –¥—Ä—É–≥—É –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.")

    # –û–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥—Ä—É–≥–∞
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ", callback_data="join_game")]
    ])
    await bot.send_message(callback_query.from_user.id, "–û–∂–∏–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥—Ä—É–≥–∞...", reply_markup=keyboard)


# –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∏–≥—Ä–µ
@dp.callback_query(F.data == 'join_game')
async def join_game(callback_query: types.CallbackQuery):
    await callback_query.answer()

    # –ó–∞–ø—Ä–æ—Å–∏—Ç—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ–¥ –∏–≥—Ä—ã
    await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–≥—Ä—ã –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:")


# –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–¥–∞ –∏–≥—Ä—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message()
async def handle_game_code(message: types.Message):
    game_code = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∏–≥—Ä–∞ —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º
    if game_code in games and len(games[game_code]["players"]) == 1:
        user_id = message.from_user.id
        games[game_code]["players"].append(user_id)

        # –ù–∞—á–∞–ª–æ –∏–≥—Ä—ã –ø–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –æ–±–æ–∏—Ö –∏–≥—Ä–æ–∫–æ–≤
        await bot.send_message(message.chat.id, "–¢—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∏–≥—Ä–µ. –ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è!")

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —à–∞—Ö–º–∞—Ç–Ω–æ–π –¥–æ—Å–∫–∏ –æ–±–æ–∏–º –∏–≥—Ä–æ–∫–∞–º
        for player in games[game_code]["players"]:
            keyboard = generate_chessboard_inline_keyboard(games[game_code]["board"])
            await bot.send_message(player, "–®–∞—Ö–º–∞—Ç–Ω–∞—è –¥–æ—Å–∫–∞:", reply_markup=keyboard)
    else:
        await message.reply("–ò–≥—Ä–∞ —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –∑–∞–Ω—è—Ç–∞.")


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —à–∞—Ö–º–∞—Ç–Ω–æ–π –¥–æ—Å–∫–∏
def initialize_board(color):
    if color == '—á–µ—Ä–Ω—ã–µ':
        board = [
            ["‚ôú", "‚ôû", "‚ôù", "‚ôõ", "‚ôö", "‚ôù", "‚ôû", "‚ôú"],  # 8
            ["‚ôü"] * 8,  # 7
            [" "] * 8,  # 6
            [" "] * 8,  # 5
            [" "] * 8,  # 4
            [" "] * 8,  # 3
            ["‚ôô"] * 8,  # 2
            ["‚ôñ", "‚ôò", "‚ôó", "‚ôï", "‚ôî", "‚ôó", "‚ôò", "‚ôñ"]  # 1
        ]
    else:
        board = [
            ["‚ôñ", "‚ôò", "‚ôó", "‚ôï", "‚ôî", "‚ôó", "‚ôò", "‚ôñ"],  # 8
            ["‚ôô"] * 8,  # 7
            [" "] * 8,  # 6
            [" "] * 8,  # 5
            [" "] * 8,  # 4
            [" "] * 8,  # 3
            ["‚ôü"] * 8,  # 2
            ["‚ôú", "‚ôû", "‚ôù", "‚ôõ", "‚ôö", "‚ôù", "‚ôû", "‚ôú"]  # 1
        ]
    return board


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —à–∞—Ö–º–∞—Ç–Ω–æ–π –¥–æ—Å–∫–∏ –∫–∞–∫ inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def generate_chessboard_inline_keyboard(board):
    inline_keyboard = []
    for rank in range(8):
        row_buttons = []
        for file in range(8):
            piece = board[rank][file]
            callback_data = f"piece_{rank}_{file}" if piece != " " else f"move_{rank}_{file}"
            row_buttons.append(InlineKeyboardButton(text=piece, callback_data=callback_data))
        inline_keyboard.append(row_buttons)
    return InlineKeyboardMarkup(inline_keyboard=inline_keyboard)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–ª–µ—Ç–∫–∏ –¥–æ—Å–∫–∏
@dp.callback_query(F.data.startswith('move_') | F.data.startswith('piece_'))
async def handle_board_action(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id

    # –ü–æ–∏—Å–∫ –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã, –≤ –∫–æ—Ç–æ—Ä–æ–π —É—á–∞—Å—Ç–≤—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    active_game = None
    for game_code, game_data in games.items():
        if user_id in game_data["players"]:
            active_game = game_data
            break

    if not active_game:
        await callback_query.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É —Å –¥—Ä—É–≥–æ–º.")
        return

    board = active_game["board"]
    selected_piece = user_board_states.get(user_id, {}).get("selected_piece", None)
    data = callback_query.data.split('_')

    action = data[0]
    rank = int(data[1])
    file = int(data[2])

    if action == 'piece':
        piece = board[rank][file]
        if piece == " ":
            await callback_query.answer("–ü—É—Å—Ç–∞—è –∫–ª–µ—Ç–∫–∞.")
            return
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ñ–∏–≥—É—Ä—É
        user_board_states[user_id] = {"selected_piece": (rank, file)}
        await callback_query.answer(f"–í—ã–±—Ä–∞–Ω–∞ —Ñ–∏–≥—É—Ä–∞: {piece} –Ω–∞ {chr(65 + file)}{8 - rank}")
    elif action == 'move':
        if selected_piece:
            start_rank, start_file = selected_piece
            piece = board[start_rank][start_file]
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ–ø—É—Å—Ç–∏–º–æ—Å—Ç–∏ —Ö–æ–¥–∞
            board[rank][file] = piece
            board[start_rank][start_file] = " "
            # –û—á–∏—Å—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ñ–∏–≥—É—Ä—ã
            user_board_states[user_id]["selected_piece"] = None

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –æ–±–æ–∏—Ö –∏–≥—Ä–æ–∫–æ–≤
            keyboard = generate_chessboard_inline_keyboard(board)
            for player in active_game["players"]:
                await bot.edit_message_reply_markup(chat_id=player, message_id=callback_query.message.message_id,
                                                    reply_markup=keyboard)
async def main():
    await dp.start_polling(bot)
# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    asyncio.run(main())
